#include<bits/stdc++.h>
using namespace std;

class node{
    public:
    int data;
    node* left;
    node* right;
};
node* root=NULL;
void insert(node *tree, node *leaf)
{
    if (root == NULL)
    {
        root = new node;
        root->data = leaf->data;
        root->left = NULL;
        root->right = NULL;
        cout<<"Added at root"<<endl;
        return;
    }
    if (tree->data == leaf->data)
    {
        cout<<"Number already in the tree"<<endl;
        return;
    }
    if (tree->data > leaf->data)
    {
        if (tree->left != NULL)
        {
            insert(tree->left, leaf);	
    	}
    	else{
            tree->left = leaf;
            (tree->left)->left = NULL;
            (tree->left)->right = NULL;
            cout<<"Number Added To Left"<<endl;
            return;
        }
    }
    else{
        if (tree->right != NULL)
        {
            insert(tree->right, leaf);
        }
        else
        {
            tree->right = leaf;
            (tree->right)->left = NULL;
            (tree->right)->right = NULL;
            cout<<"Number Added To Right"<<endl;
            return;
        }	
    }
}


int height(node* root){
    if(root==NULL){
        return 0;
    }
    else{
        int left_height=height(root->left);
        int right_height=height(root->right);
        if(left_height>right_height){
            return (left_height+1);
        }
        else{
            return (left_height+1);
        }
    }
}
void findbsf(node* root,int lvl){
    if(root==NULL){
        return;
    }
    else if(lvl==1){
        cout<<root->data<<" ";
    }
    else if(lvl>1){
        findbsf(root->left,lvl-1);
        findbsf(root->right,lvl-1);
    }

}
void bsf(node* root){
    int h=height(root);
    for(int i=0;i<=h;i++){
        findbsf(root,i);
    }
}
void dfs_pre(node* ptr){
    if(root==NULL){
        cout<<"Empty";
        return;
    }
    if(ptr!=NULL){
         cout<<ptr->data<<" ";
        dfs_pre(ptr->left);
        dfs_pre(ptr->right);
    }
}
void dfs_in(node* ptr){
    if(root == NULL){
        cout<<"Empty"<<endl;
        return;
    }
    if(ptr!=NULL){
        dfs_in(ptr->left);
        cout<<ptr->data<<" ";
        dfs_in(ptr->right);
    }
}
void dfs_post(node* ptr){
    if(root==NULL){
        cout<<"Empty"<<endl;
        return;
    }
    if(ptr!=NULL)
    {
        dfs_post(ptr->left);
        dfs_post(ptr->right);
        cout<<ptr->data<<" ";
    }
}
void display(node *ptr, int lvl)
{
    int i;
    if (ptr != NULL){
        display(ptr->right, lvl+1);
        cout<<endl;
           if (ptr == root)
            cout<<"Root->:  ";
           else
           {
            for (i = 0;i < lvl;i++)
            cout<<"         ";
	        }
        cout<<ptr->data;
        display(ptr->left, lvl+1);
    }
}


int main(){
    node *temp;
    int choice, num;

     while (1)
    {
        cout<<"\t\t\t\t\t-----------------"<<endl;
        cout<<"\t\t\t\t\t1.Insert Element "<<endl;
        cout<<"\t\t\t\t\t2.Display"<<endl;
        cout<<"\t\t\t\t\t3.Height Of Tree: "<<endl;
        cout<<"\t\t\t\t\t4.Breadth First Search: "<<endl;
        cout<<"\t\t\t\t\t5.DFS"<<endl;
       
        cout<<"\t\t\t\t\t6.exit"<<endl;
        cout<<"\t\t\t\t\t-----------------"<<endl;
        cout<<"Enter your choice : ";
        cin>>choice;
        switch(choice)
        {
        case 1:
            temp = new node;
            cout<<"Enter the number to be inserted : ";
	        cin>>temp->data;
            insert(root, temp);
            break;
        case 2:
            cout<<"Display:"<<endl;
            display(root,1);
            cout<<endl;
            break;
        case 3:
            cout<<"Height Of Tree: ";
            cout<<height(root)<<endl;
            break;
        case 4:
            cout<<"BFS: ";
            bsf(root);
            break;
        case 5:
            cout<<"DFS: ";
            cout<<"Pre Order: ";
            dfs_pre(root);
            cout<<"\nin Order: ";
            dfs_in(root);
            cout<<"\npost Order: ";
            dfs_post(root);
            break;
        case 6:
            exit(1);
        default:
            cout<<"Wrong choice"<<endl;
        }
    }
return 0;
}
